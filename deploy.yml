AWSTemplateFormatVersion: 2010-09-09
Description: Template for auto scaling Fargate service based on basic serverless container API

Parameters:
  # Netowork params
  VpcId:
    Type: String
    Description: Name of VPC stack to build off of
  AlbSubnet1:
    Type: String
  AlbSubnet2:
    Type: String

  CertificateArn:
    Type: String
    Description: ARN of an existing certificate which will be attached to the ALB created by the stack, to serve HTTPS traffic.

  EcsClusterArn:
    Type: String
    Description: Name of ECS Cluster stack to run service
  Image:
    Type: String
    Description: URI of Docker image

  MaxContainers:
    Type: Number
    Description: Max containers to scale to
    Default: 1

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref AlbSubnet1
        - !Ref AlbSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: Security group for load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref NginxSecurityGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: NginxTargetGroup
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId

  NginxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: NginxSecurityGroup
      GroupDescription: Security group for Nginx
      VpcId: !Ref VpcId
  NginxSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId: !Ref NginxSecurityGroup
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  NginxExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: nginx-execution-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsClusterArn
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !GetAtt NginxSecurityGroup.GroupId
            Subnets:
              - !Ref AlbSubnet1
              - !Ref AlbSubnet2
      TaskDefinition: !Ref FargateServiceTaskDefinition
    DependsOn: Listener

  FargateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FargateServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: nginx
          Image: !Ref Image
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: nginx
                awslogs-region: !Ref AWS::Region
          PortMappings:
            -
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      ExecutionRoleArn: !Ref NginxExecutionRole

Outputs:
  DNSName:
    Description: ALB DNS value
    Value: !GetAtt LoadBalancer.DNSName
    
# -----------------------------------------------------------
#  AUTO SCALING
# -----------------------------------------------------------

  # AutoScalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ecs-tasks.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: '/'
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:DescribeServices
  #                 - ecs:UpdateService
  #                 - cloudwatch:DeleteAlarms
  #                 - cloudwatch:DescribeAlarms
  #                 - cloudwatch:PutMetricAlarm
  #               Resource: '*'

  # AutoScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MinCapacity: 1
  #     MaxCapacity: !Ref MaxContainers
  #     ResourceId: !Join
  #       - '/'
  #       - - service
  #         - Fn::ImportValue: !Ref EcsClusterArn
  #         - !GetAtt FargateService.Name
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  #     RoleARN: !GetAtt AutoScalingRole.Arn

  # ScaleUpPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub '${FargateService}ScaleUpPolicy'
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref AutoScalingTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #         - MetricIntervalLowerBound: 0
  #           ScalingAdjustment: 1
  # ScaleDownPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub '${FargateService}ScaleDownPolicy'
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref AutoScalingTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #         - MetricIntervalUpperBound: 0
  #           ScalingAdjustment: -1

  # # this alarm is somewhat nonsense but easy to test out
  # # change to something relevant before production
  # AlarmHighRequests:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     ActionsEnabled: TRUE
  #     AlarmActions:
  #       - !Ref ScaleUpPolicy
  #     AlarmDescription: !Sub
  #       - 'Scale Up Alarm based on requests for ${FargateServiceName}'
  #       - FargateServiceName: !GetAtt FargateService.Name
  #     ComparisonOperator: GreaterThanThreshold
  #     DatapointsToAlarm: 2
  #     # these can be found in the console after selecting a namespace to filter by
  #     Dimensions:
  #       - Name: TargetGroup
  #         Value: !GetAtt TargetGroup.TargetGroupFullName
  #     EvaluationPeriods: 3
  #     # this can be found in the console on the screen before a metric is graphed
  #     MetricName: RequestCountPerTarget
  #     # this can be found in the console on the first screen of filtering metrics
  #     Namespace: AWS/ApplicationELB
  #     OKActions:
  #       - !Ref ScaleDownPolicy
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 3000
  #     TreatMissingData: ignore
  #     Unit: None # comes from the metric


